{
	"info": {
		"_postman_id": "6d2f2699-4e12-4917-8f1d-730852ec4b1e",
		"name": "Tableo API",
		"description": "## Prepare Your Environment:\n\nChange the url to the `Sandbox Url` for test\n\n**Production Url:**\n\n> [https://app.bookia.eu/api/google-server/v3](https://app.bookia.eu/api/google-server/v3) \n  \n\n**Sandbox Url:**\n\n> [https://devrms.tableo.com/api/google-server/v3](https://devrms.tableo.com/api/google-server/v3)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "507440",
		"_collection_link": "https://galactic-robot-553482.postman.co/workspace/767862a5-1eea-4043-8391-8ca054ec6548/collection/507440-6d2f2699-4e12-4917-8f1d-730852ec4b1e?action=share&source=collection_link&creator=507440"
	},
	"item": [
		{
			"name": "google server",
			"item": [
				{
					"name": "merchants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Stores the first merchant's ID in a global variable",
									"var firstMerchantId = responseBody[0].merchant_id;",
									"pm.globals.set(\"merchant_id\", firstMerchantId);",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify the structure of the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach((merchant) => {",
									"        pm.expect(merchant).to.have.property('category').that.is.a('string');",
									"        pm.expect(merchant).to.have.property('merchant_id').that.is.a('string');",
									"        pm.expect(merchant).to.have.property('name').that.is.a('string');",
									"        pm.expect(merchant).to.have.property('url').that.is.a('string');",
									"        pm.expect(merchant).to.have.property('telephone').that.is.a('string');",
									"        pm.expect(merchant).to.have.property('geo').that.is.an('object');",
									"        pm.expect(merchant).to.have.property('brand_id').that.is.a('string');",
									"        pm.expect(merchant).to.have.property('terms').that.is.an('object');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Validate the geo object structure\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(merchant => {",
									"        pm.expect(merchant.geo).to.be.an('object');",
									"        pm.expect(merchant.geo.latitude).to.be.a('number');",
									"        pm.expect(merchant.geo.longitude).to.be.a('number');",
									"        pm.expect(merchant.geo.address).to.be.an('object');",
									"        pm.expect(merchant.geo.address.locality).to.be.a('string');",
									"        pm.expect(merchant.geo.address.country).to.be.a('string');",
									"        pm.expect(merchant.geo.address.region).to.be.a('string');",
									"        pm.expect(merchant.geo.address.street_address).to.be.a('string');",
									"        pm.expect(merchant.geo.address.postal_code).to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Dining areas array contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData[0].dining_areas).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"pm.test(\"Each dining area element has an id and name\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData[0].dining_areas.forEach(function(diningArea) {",
									"        pm.expect(diningArea).to.have.property('id').that.is.a('number');",
									"        pm.expect(diningArea).to.have.property('name').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "source",
									"value": "facebook",
									"description": "(optional)",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/merchants",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"merchants"
							]
						},
						"description": "This method returns all merchants.\n\n**Request**\n\nNone\n\n**Return value**\n\nNone."
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/merchants",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"merchants"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.21.4"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.33"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 10 Jan 2023 18:46:28 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"category\": \"restaurant\",\n        \"merchant_id\": \"ChIJwwPvxwhRDhMRcphZtJwk4HQ\",\n        \"name\": \"Testing restaurant\",\n        \"url\": \"https://my-restaurant.com/\",\n        \"telephone\": \"+35620000000\",\n        \"geo\": {\n            \"latitude\": 35.900000,\n            \"longitude\": 14.4100000,\n            \"address\": {\n                \"locality\": \"Il-Mosta\",\n                \"country\": \"MT\",\n                \"region\": \"\",\n                \"street_address\": \"Triq Durumblat Mosta MST, Il-Mosta 4812, Malta\",\n                \"postal_code\": \"MST 4812\"\n            }\n        },\n        \"brand_id\": \"Tableo\"\n    }\n]"
						}
					]
				},
				{
					"name": "HealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the 'status' field\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.status).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The status field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate response fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(1, \"Response should only have one field\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/HealthCheck",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"HealthCheck"
							]
						},
						"description": "This method returns your Booking Server health status. It enables Google to continuously monitor the serving state of your Booking server.\n\n**Request**\n\nNone\n\n**Return value**\n\nNone.\n\nUse HTTP status code to indicate the serving status of your server. Return an HTTP status code 200 (OK) if the server is up and running successfully, or to indicate an error please return one ofÂ [HTTP status code](https://developers.google.com/maps-booking/verticals/dining/reference/rest-api-v3/status_codes).\n\nPlease note that returning a non-200 status code may affect your integration status."
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/HealthCheck",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"HealthCheck"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.19.9"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.32"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Dec 2022 17:57:31 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"serving\"\n}"
						}
					]
				},
				{
					"name": "availabilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Content type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/availabilities/{{merchant_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"availabilities",
								"{{merchant_id}}"
							]
						},
						"description": "This method returns avaialbility for a specific merchant\n\n**Request**\n\n```\n//params = merchant_id \n\n```\n\n**Return value**\n\nNone."
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/availabilities/ChIJixuLkaBLDhMRN0naVikYRhM",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"availabilities",
										"ChIJixuLkaBLDhMRN0naVikYRhM"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.21.4"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.33"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 10 Jan 2023 18:52:13 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"spots_total\": 3,\n        \"spots_open\": 3,\n        \"start_sec\": 1752048000,\n        \"duration_sec\": 1800,\n        \"service_id\": \"reservation\",\n        \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n        \"merchant_id\": \"ChIJrXobRBRRDhMRVDIWhzzmi38\",\n        \"max_covers\": 20,\n        \"max_days\": 45,\n        \"resources\": {\n            \"party_size\": 2,\n            \"room_id\": \"1\",\n            \"room_name\": \"Main Dining\"\n        }\n    },\n    {\n        \"spots_total\": 2,\n        \"spots_open\": 2,\n        \"start_sec\": 1752048000,\n        \"duration_sec\": 1800,\n        \"service_id\": \"reservation\",\n        \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n        \"merchant_id\": \"ChIJrXobRBRRDhMRVDIWhzzmi38\",\n        \"max_covers\": 20,\n        \"max_days\": 45,\n        \"resources\": {\n            \"party_size\": 1,\n            \"room_id\": \"1\",\n            \"room_name\": \"Main Dining\"\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the returned JSON\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(service) {",
									"    pm.expect(service).to.be.an('object');",
									"    pm.expect(service.merchant_id).to.exist.and.to.be.a('string');",
									"    pm.expect(service.service_id).to.exist.and.to.be.a('string');",
									"    pm.expect(service.localized_service_name).to.exist.and.to.be.an('object');",
									"    pm.expect(service.localized_service_name.value).to.exist.and.to.be.a('string');",
									"    pm.expect(service.rules).to.exist.and.to.be.an('object');",
									"    pm.expect(service.rules.min_advance_booking).to.exist.and.to.be.a('number');",
									"    pm.expect(service.rules.min_advance_online_canceling).to.exist.and.to.be.a('number');",
									"    pm.expect(service.rules.cancellation_policy).to.exist.and.to.be.an('object');",
									"    pm.expect(service.rules.cancellation_policy.refund_condition).to.exist.and.to.be.an('array');",
									"    service.rules.cancellation_policy.refund_condition.forEach(function(refund) {",
									"      pm.expect(refund).to.be.an('object');",
									"      pm.expect(refund.min_duration_before_start_time_sec).to.exist.and.to.be.a('number');",
									"      pm.expect(refund.refund_percent).to.exist.and.to.be.a('number');",
									"    });",
									"    pm.expect(service.prepayment_type).to.exist.and.to.be.a('string');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Localized service name value is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(service) {",
									"    pm.expect(service.localized_service_name.value).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Rules for minimum advance booking and minimum advance online canceling are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(service => {",
									"        pm.expect(service.rules).to.exist.and.to.be.an('object');",
									"        pm.expect(service.rules.min_advance_booking).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(service.rules.min_advance_online_canceling).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/services",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"services"
							]
						},
						"description": "This method returns all services.\n\n**Request**\n\nNone\n\n**Return value**\n\nNone."
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/services",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"services"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.21.4"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.33"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 10 Jan 2023 18:47:25 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"merchant_id\": \"ChIJrXobRBRRDhMRVDIWhzzmi38\",\n        \"service_id\": \"reservation\",\n        \"localized_service_name\": {\n            \"value\": \"Reservation\"\n        },\n        \"rules\": {\n            \"min_advance_booking\": 1800,\n            \"min_advance_online_canceling\": 0,\n            \"cancellation_policy\": {\n                \"refund_condition\": [\n                    {\n                        \"min_duration_before_start_time_sec\": 0,\n                        \"refund_percent\": 100\n                    }\n                ]\n            }\n        },\n        \"prepayment_type\": \"NOT_SUPPORTED\"\n    }\n]"
						}
					]
				},
				{
					"name": "UpdateBooking Cancelation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response must have the required Content-Type header of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response must have the required Content-Type header of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the response object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.booking).to.be.an('object');",
									"    pm.expect(responseData.booking.booking_id).to.be.a('string');",
									"    pm.expect(responseData.booking.status).to.be.a('string');",
									"    pm.expect(responseData.process_duration_in_milliseconds).to.be.a('number');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"booking\": {\n        \"booking_id\": \"{{booking_id}}\",\n        \"status\":\"CANCELED\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/UpdateBooking",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"UpdateBooking"
							]
						},
						"description": "# UpdateBooking Cancel method\n\nThe client uses UpdateBooking cancel an existing booking.\n\nIf updating a booking fails due to any business logic error, the error should be populated in the `UpdateBookingResponse.booking_failure` field and returned with HTTP status 200.\n\n**Request**\n\n```\n  // The booking to be updated\n  // The following fields can be set in a booking:\n  // - status, to cancel a booking.\n  // - one of the following is required:\n  //   - start_time AND duration in the slot, to reschedule a booking.\n  //   - party_size (for dining reservations).\n  Object booking = {};\n  // ID of this booking, which must be unique across all bookings. (required)\n  string booking_id = \"1\";\n  // Status of the booking (required for CreateBooking and UpdateBooking:cancel,\n  // but not UpdateBooking:modify)\n  String status = \"CANCELED\";\n\n```\n\nA request message contains updated information in the booking field. The request will contain a `booking_id` to identify the booking to update. It will also include:\n\n1. Status to change (booking cancellation)\n    \n\nFields which do not require change will not be provided in the request.\n\n**Return value**\n\n```\n  // The updated booking (required)\n  Object booking = {};\n  // If updating a booking fails, this field should reflect the business logic\n  // error (e.g., booking is not cancellable) (required if failure occurs)\n  Object booking_failure = {};\n  // duration in milliseconds from the server\n  Int64 process_duration_in_milliseconds = 362\n\n```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking\": {\n        \"booking_id\": \"Google-V2M-NYB\",\n        \"status\":\"CANCELED\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/UpdateBooking",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"UpdateBooking"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.19.9"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.32"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Dec 2022 18:36:44 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"booking\": {\n        \"booking_id\": \"Google-V2M-NYB\",\n        \"status\": \"CANCELED\"\n    },\n    \"process_duration_in_milliseconds\": 17324\n}"
						}
					]
				},
				{
					"name": "UpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Booking ID is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.booking.booking_id).to.exist.and.to.have.lengthOf.at.least(1, \"Booking ID should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Booking failure field should not be present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.booking.booking_failure).to.not.exist;",
									"});",
									"",
									"",
									"pm.test(\"Slot object is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.booking).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.booking.slot).to.exist.and.to.be.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"booking\": {\n        \"booking_id\": \"{{booking_id}}\",\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/UpdateBooking",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"UpdateBooking"
							]
						},
						"description": "# UpdateBooking method\n\nThe client uses UpdateBooking to modify an existing booking.\n\nIf updating a booking fails due to any business logic error, the error should be populated in the `UpdateBookingResponse.booking_failure` field and returned with HTTP status 200.\n\n**Request**\n\n``` markdown\n  // The booking to be updated\n  // The following fields can be set in a booking:\n  // - status, to cancel a booking.\n  // - one of the following is required:\n  //   - start_time AND duration in the slot, to reschedule a booking.\n  //   - party_size (for dining reservations).\n  Object booking = {};\n  // ID of this booking, which must be unique across all bookings. (required)\n  string booking_id = \"1\";\n  // The inventory slot that is being requested to make this booking.\n  // If lease_ref is provided, slot must match the lease; slot is provided for\n  // the partner to verify the lease information.\n  // If lease_ref is absent, then create the booking for the slot. (required)\n  Object slot = {};\n\n```\n\nA request message contains updated information in the booking field. The request will contain a `booking_id` to identify the booking to update. It will also include:\n\n1. Slot details to update (booking modifications)\n    \n\nFields which do not require change will not be provided in the request.\n\n**Return value**\n\n``` markdown\n  // The updated booking (required)\n  Object booking = {};\n  // If updating a booking fails, this field should reflect the business logic\n  // error (e.g., booking is not cancellable) (required if failure occurs)\n  Object booking_failure = {};\n  // duration in milliseconds from the server\n  Int64 process_duration_in_milliseconds = 362\n\n```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking\": {\n        \"booking_id\": \"\",\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/UpdateBooking",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"UpdateBooking"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.19.9"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.32"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Dec 2022 18:31:49 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"booking\": {\n        \"booking_id\": \"Google-V2M-NYB\",\n        \"payment_information\": {\n            \"prepayment_status\": \"PREPAYMENT_NOT_PROVIDED\"\n        },\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        },\n        \"status\": \"CONFIRMED\"\n    },\n    \"process_duration_in_milliseconds\": 20899\n}"
						}
					]
				},
				{
					"name": "SetMarketingPreferenceRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - email, family_name, given_name, telephone, user_id\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user_information.email).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.user_information.family_name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.user_information.given_name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.user_information.telephone).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.user_information.user_id).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"User_to_receive_marketing is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.user_to_receive_marketing).to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Process duration is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.process_duration_in_milliseconds).to.be.a('number');",
									"    pm.expect(responseData.process_duration_in_milliseconds).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"user_information\": {\n        \"email\": \"mauroziux@gmail.com\",\n        \"family_name\": \"Suarez Vega\",\n        \"given_name\": \"Mauricio\",\n        \"telephone\": \"+356 9993 9607\",\n        \"user_id\": \"13126198240951105170\"\n    },\n    \"user_to_receive_marketing\":1\n   \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/SetMarketingPreference",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"SetMarketingPreference"
							]
						},
						"description": "# SetMarketingPreferenceRequest method"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"user_information\": {\n        \"email\": \"mauroziux@gmail.com\",\n        \"family_name\": \"Suarez Vega\",\n        \"given_name\": \"Mauricio\",\n        \"telephone\": \"+356 9993 9607\",\n        \"user_id\": \"13126198240951105170\"\n    },\n    \"user_to_receive_marketing\":1\n   \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/SetMarketingPreferenceRequest",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"SetMarketingPreferenceRequest"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "Date",
									"value": "Tue, 21 Feb 2023 20:02:00 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.33"
								},
								{
									"key": "X-Powered-By",
									"value": "PleskLin"
								},
								{
									"key": "Cache-Control",
									"value": "private, must-revalidate"
								},
								{
									"key": "pragma",
									"value": "no-cache"
								},
								{
									"key": "expires",
									"value": "-1"
								},
								{
									"key": "Vary",
									"value": "Authorization"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								}
							],
							"cookie": [],
							"body": "{\n    \"user_information\": {\n        \"email\": \"mauroziux@gmail.com\",\n        \"family_name\": \"Suarez Vega\",\n        \"given_name\": \"Mauricio\",\n        \"telephone\": \"+356 9993 9607\",\n        \"user_id\": \"13126198240951105170\"\n    },\n    \"user_to_receive_marketing\": 1,\n    \"process_duration_in_milliseconds\": 37\n}"
						}
					]
				},
				{
					"name": "CreateBooking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get current date",
									"let currentDate = new Date();",
									"",
									"// Calculate days until next Friday (assuming today is Sunday as 0 and Saturday as 6)",
									"let daysUntilFriday = 5 - currentDate.getDay();",
									"",
									"// If today is Friday, add 7 days to get next Friday",
									"if (daysUntilFriday <= 0) {",
									"    daysUntilFriday += 7;",
									"}",
									"",
									"// Add days until next Friday",
									"    currentDate.setDate(currentDate.getDate() + daysUntilFriday);",
									"",
									"// Initialize array to store Unix times for the next four Fridays",
									"let unixTimes = [];",
									"",
									"// Generate Unix times for the next four Fridays",
									"for (let i = 0; i < 4; i++) {",
									"    // Set time to 7pm",
									"    ",
									"",
									"    for (let h = 12; h < 20; h++) {",
									"",
									"        currentDate.setHours(h, 0, 0, 0);",
									"        // Calculate Unix time",
									"        let unixTime = Math.floor(currentDate.getTime() / 1000);",
									"",
									"        // Add to array",
									"        unixTimes.push(unixTime);",
									"",
									"    }",
									"",
									"    // Move to next Friday",
									"    currentDate.setDate(currentDate.getDate() + 7);",
									"}",
									"",
									"// Choose a random Unix time from the array for next Friday",
									"let randomIndex = Math.floor(Math.random() * unixTimes.length);",
									"let randomFridayUnixTime = unixTimes[randomIndex];",
									"",
									"// Set environment variable for next Friday",
									"pm.environment.set(\"nextFridayUnixTime\", randomFridayUnixTime);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"pm.environment.set(\"booking_id\", data.booking.booking_id);",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Booking ID is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.booking.booking_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"idempotency_token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.booking.idempotency_token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate payment_information object\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.booking.payment_information).to.be.an('object');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"idempotency_token\": \"15731994231250081786\",\n    \"payment_information\": {\n        \"prepayment_status\": \"PREPAYMENT_NOT_PROVIDED\"\n    },\n    \"slot\": {\n        \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n        \"duration_sec\": \"1800\",\n        \"merchant_id\": \"{{merchant_id}}\",\n        \"resources\": {\n            \"party_size\": 2,\n            \"room_id\": \"3\"\n        },\n        \"service_id\": \"reservation\",\n        \"start_sec\": \"{{nextFridayUnixTime}}\"\n    },\n    \"user_information\": {\n        \"email\": null,\n        \"family_name\": null,\n        \"given_name\": \"Jonathan\",\n        \"telephone\": null,\n        \"user_id\": null\n    },\n    \"source\": \"aiphonebot\",\n    \"additional_request\": \"-SPECIAL REQUESTS: I will be bringing a small dog.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/CreateBooking",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"CreateBooking"
							]
						},
						"description": "# CreateBooking method\n\nThe client requests to create a booking. The partner backend makes a booking for the requested slot, and returns the slot upon success, or business logic error (e.g. if the slot has become unavailable, or if payment is invalid, etc.) upon failure.\n\nPlease note that business logic errors should be returned in the `CreateBookingResponse.booking_failure` field, rather than via a non-200 HTTP response code.\n\n**Request**\n\n``` markdown\n  // The inventory slot that is being requested to make this booking.\n  // If lease_ref is provided, slot must match the lease; slot is provided for\n  // the partner to verify the lease information.\n  // If lease_ref is absent, then create the booking for the slot. (required)\n  Object slot = {};\n  \n  // Personal information of the user making the appointment (required)\n  Object user_information = {};\n  \n  // Information about payments. When payment authorizations are handled by\n  // Google, if the booking request does not succeed, payment authorizations are\n  // automatically canceled. (optional)\n  Object payment_information = {};\n  \n  //\n  String prepayment_status = \"PREPAYMENT_NOT_PROVIDED\";\n  \n  // Idempotency token for CreateBooking requests. (required)\n  //\n  // This uniquely identifies a booking request. Specifically:\n  // - If a booking was already created for a CreateBooking request with this\n  // idempotency token, that booking should be returned.\n  // - If no booking has been created for a CreateBooking request with this\n  // idempotency token, this should be considered to be a request for a new\n  // booking, and **no previously-created booking may be returned**.\n  //\n  // If a partner considers the requested booking to be a duplicate of a\n  // previously-created booking, this request should fail with reason\n  // BookingFailure.OVERLAPPING_RESERVATION. The partner is responsible for\n  // determining whether this duplicates a previous booking, but for example the\n  // partner may consider a booking request to be a duplicate if an existing\n  // booking has the same party size, time, and email address.\n  string idempotency_token = \"6\";\n\n```\n\n**Return value**\n\n```\n  // The created booking (required)\n  Object booking = {};\n  // ID of this booking, which must be unique across all bookings. (required)\n  string booking_id = \"1\";\n  // Personal information of the user making the appointment (required for\n  // CreateBooking)\n  Object user_information = {};\n  // Status of the booking (required for CreateBooking and UpdateBooking:cancel,\n  // but not UpdateBooking:modify)\n  String status = \"CONFIRMED\";\n  / Information about payment transactions that relate to the booking.\n  // (optional)\n  Object payment_information = {};\n  // duration in milliseconds from the server\n  Int64 process_duration_in_milliseconds = 362\n\n```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"idempotency_token\": \"15731994231250081786\",\n    \"payment_information\": {\n        \"prepayment_status\": \"PREPAYMENT_NOT_PROVIDED\"\n    },\n    \"slot\": {\n        \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n        \"duration_sec\": \"1800\",\n        \"merchant_id\": \"ChIJixuLkaBLDhMRN0naVikYRhM\",\n        \"resources\": {\n            \"party_size\": 2,\n            \"room_id\": \"1\"\n        },\n        \"service_id\": \"reservation\",\n        \"start_sec\": \"1671645600\"\n    },\n    \"user_information\": {\n        \"email\": \"mauricio@bookia.eu\",\n        \"family_name\": \"Suarez Vega\",\n        \"given_name\": \"Mauricio\",\n        \"telephone\": \"+356 9993 9607\",\n        \"user_id\": \"13126198240951105170\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/CreateBooking",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"CreateBooking"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.19.9"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.32"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Dec 2022 18:11:19 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"booking\": {\n        \"booking_id\": \"Google-5NJ-1P8\",\n        \"idempotency_token\": \"15731994231250081786\",\n        \"payment_information\": {\n            \"prepayment_status\": \"PREPAYMENT_NOT_PROVIDED\"\n        },\n        \"slot\": {\n            \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n            \"duration_sec\": \"1800\",\n            \"merchant_id\": \"ChIJixuLkaBLDhMRN0naVikYRhM\",\n            \"resources\": {\n                \"party_size\": 2,\n                \"room_id\": \"1\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1671645600\"\n        },\n        \"status\": \"CONFIRMED\",\n        \"user_information\": {\n            \"email\": \"mauricio@bookia.eu\",\n            \"family_name\": \"Suarez Vega\",\n            \"given_name\": \"Mauricio\",\n            \"telephone\": \"+356 9993 9607\",\n            \"user_id\": \"13126198240951105170\"\n        }\n    },\n    \"process_duration_in_milliseconds\": 650\n}"
						}
					]
				},
				{
					"name": "CheckAvailability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Slot time availability and process duration exist\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.slot_time_availability).to.exist;",
									"    pm.expect(responseData.process_duration_in_milliseconds).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test(\"The response must be an object\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Check for the existence of slot_time_availability array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.slot_time_availability).to.exist.and.to.be.an('array');",
									"});",
									"",
									"pm.test(\"Check for process_duration_in_milliseconds property\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.process_duration_in_milliseconds).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the content type is 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"The process duration is a number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.process_duration_in_milliseconds).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get current date",
									"let currentDate = new Date();",
									"",
									"// Calculate days until next Friday (assuming today is Sunday as 0 and Saturday as 6)",
									"let daysUntilFriday = 5 - currentDate.getDay();",
									"",
									"// If today is Friday, add 7 days to get next Friday",
									"if (daysUntilFriday <= 0) {",
									"    daysUntilFriday += 7;",
									"}",
									"",
									"// Add days until next Friday",
									"    currentDate.setDate(currentDate.getDate() + daysUntilFriday);",
									"",
									"// Initialize array to store Unix times for the next four Fridays",
									"let unixTimes = [];",
									"",
									"// Generate Unix times for the next four Fridays",
									"for (let i = 0; i < 4; i++) {",
									"    // Set time to 7pm",
									"    ",
									"",
									"    for (let h = 12; h < 20; h++) {",
									"",
									"        currentDate.setHours(h, 0, 0, 0);",
									"        // Calculate Unix time",
									"        let unixTime = Math.floor(currentDate.getTime() / 1000);",
									"",
									"        // Add to array",
									"        unixTimes.push(unixTime);",
									"",
									"    }",
									"",
									"    // Move to next Friday",
									"    currentDate.setDate(currentDate.getDate() + 7);",
									"}",
									"",
									"// Choose a random Unix time from the array for next Friday",
									"let randomIndex = Math.floor(Math.random() * unixTimes.length);",
									"let randomFridayUnixTime = unixTimes[randomIndex];",
									"",
									"// Set environment variable for next Friday",
									"pm.environment.set(\"nextFridayUnixTime\", randomFridayUnixTime);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "4R72kHupUQU9S@4DR%@$",
									"type": "string"
								},
								{
									"key": "username",
									"value": "google-pass@tableo.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchant_id\": \"{{merchant_id}}\",\n    \"slot_time\": [\n        {\n            \"duration_sec\": \"1800\",\n             \"resource_ids\": {\n                \"party_size\": 2,\n                \"room_id\": \"1\"\n            \n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1748642400\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/CheckAvailability",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"CheckAvailability"
							]
						},
						"description": "# CheckAvailability method\n\nWhen a CheckAvailability is issued, the partner booking server verifies that the requested appointment slots are currently valid and available. This can be used by Reserve with Google to ensure that only current slots are presented to users during the reservation flow.\n\n**Request**\n\n```\n// ID of the merchant.\nstring merchant_id = 1;\n// Multiple slot times to be checked for availability. All queried times apply   \n// to the same merchant_id and service_id.\nArray slot_time = [];\n// ID of the service. (required)   \nstring service_id = \"reservation\";\n// Start time of the appointment slot in seconds of UTC time since Unix epoch\n// (required)   \nint64 start_sec = 1;\n// Duration of the appointment slot in seconds (optional)   \nint64 duration_sec = 2;\n// The set of resources that specifies the appointment slot, e.g. by   \n// indicating the staff member and room selected by the user, or party size   \n// for dining slots (optional)   \nstring room_id = \"1\";\n// For Dining Reservations only: the number of seats requested in the booking.   \n// (required)\nint32 party_size = 3;\n\n ```\n\n**Return value**\n\n```\n// The availabilities for the requested SlotTime entries. There must be   \n// exactly one slot_time_availability for each SlotTime entry in the   \n// [ext.maps.booking.partner.v3.BatchAvailabilityLookupRequest].   \nArray slot_time_availability = [];\n// The SlotTime for which availability was checked.   \nArray slot_time = [];\n// Whether the requested SlotTime is available   \nbool available;\n\n ```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchant_id\": \"ChIJixuLkaBLDhMRN0naVikYRhM\",\n    \"slot_time\": [\n        {\n            \"duration_sec\": \"1800\",\n            \"resource_ids\": {\n                \"party_size\": 2\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1695222000\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/checkAvailability",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"checkAvailability"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.25.1"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.2.8"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 19 Sep 2023 17:23:24 GMT"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"slot_time_availability\": [\n        {\n            \"spots_total\": 16,\n            \"spots_open\": 16,\n            \"start_sec\": 1695222000,\n            \"duration_sec\": 10800,\n            \"service_id\": \"reservation\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n            \"merchant_id\": \"ChIJ2-3yAxxQDhMRSjPwa__Ne2I\",\n            \"max_covers\": 15,\n            \"max_days\": 60,\n            \"resources\": {\n                \"party_size\": 2,\n                \"room_id\": \"1\",\n                \"room_name\": \"Main Dining\"\n            }\n        },\n        {\n            \"spots_total\": 7,\n            \"spots_open\": 7,\n            \"start_sec\": 1695222000,\n            \"duration_sec\": 10800,\n            \"service_id\": \"reservation\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n            \"merchant_id\": \"ChIJ2-3yAxxQDhMRSjPwa__Ne2I\",\n            \"max_covers\": 15,\n            \"max_days\": 60,\n            \"resources\": {\n                \"party_size\": 2,\n                \"room_id\": \"2\",\n                \"room_name\": \"Outdoor\"\n            }\n        },\n        {\n            \"spots_total\": 16,\n            \"spots_open\": 16,\n            \"start_sec\": 1695223800,\n            \"duration_sec\": 10800,\n            \"service_id\": \"reservation\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n            \"merchant_id\": \"ChIJ2-3yAxxQDhMRSjPwa__Ne2I\",\n            \"max_covers\": 15,\n            \"max_days\": 60,\n            \"resources\": {\n                \"party_size\": 2,\n                \"room_id\": \"1\",\n                \"room_name\": \"Main Dining\"\n            }\n        },\n        {\n            \"spots_total\": 7,\n            \"spots_open\": 7,\n            \"start_sec\": 1695223800,\n            \"duration_sec\": 10800,\n            \"service_id\": \"reservation\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n            \"merchant_id\": \"ChIJ2-3yAxxQDhMRSjPwa__Ne2I\",\n            \"max_covers\": 15,\n            \"max_days\": 60,\n            \"resources\": {\n                \"party_size\": 2,\n                \"room_id\": \"2\",\n                \"room_name\": \"Outdoor\"\n            }\n        },\n        {\n            \"spots_total\": 16,\n            \"spots_open\": 16,\n            \"start_sec\": 1695225600,\n            \"duration_sec\": 10800,\n            \"service_id\": \"reservation\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n            \"merchant_id\": \"ChIJ2-3yAxxQDhMRSjPwa__Ne2I\",\n            \"max_covers\": 15,\n            \"max_days\": 60,\n            \"resources\": {\n                \"party_size\": 2,\n                \"room_id\": \"1\",\n                \"room_name\": \"Main Dining\"\n            }\n        },\n        {\n            \"spots_total\": 7,\n            \"spots_open\": 7,\n            \"start_sec\": 1695225600,\n            \"duration_sec\": 10800,\n            \"service_id\": \"reservation\",\n            \"confirmation_mode\": \"CONFIRMATION_MODE_SYNCHRONOUS\",\n            \"merchant_id\": \"ChIJ2-3yAxxQDhMRSjPwa__Ne2I\",\n            \"max_covers\": 15,\n            \"max_days\": 60,\n            \"resources\": {\n                \"party_size\": 2,\n                \"room_id\": \"2\",\n                \"room_name\": \"Outdoor\"\n            }\n        }\n    ],\n    \"process_duration_in_milliseconds\": 74195696\n}"
						}
					]
				},
				{
					"name": "BatchAvailabilityLookup testing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Slot time availability array and its elements must have the correct structure\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.slot_time_availability).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.slot_time_availability.forEach(function(slot) {",
									"        pm.expect(slot).to.have.property('slot_time').that.is.an('object').and.is.not.empty;",
									"        pm.expect(slot.slot_time).to.have.property('duration_sec').that.is.a('string');",
									"        pm.expect(slot.slot_time).to.have.property('resource_ids').that.is.an('object');",
									"        pm.expect(slot.slot_time.resource_ids).to.have.property('party_size').that.is.a('number');",
									"        pm.expect(slot.slot_time.resource_ids).to.have.property('room_id').that.is.a('string');",
									"        pm.expect(slot.slot_time).to.have.property('service_id').that.is.a('string');",
									"        pm.expect(slot.slot_time).to.have.property('start_sec').that.is.a('string');",
									"        pm.expect(slot).to.have.property('available').that.is.a('boolean');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Ensure process_duration_in_milliseconds is 0\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.process_duration_in_milliseconds).to.below(100);",
									"});",
									"",
									"",
									"pm.test(\"Slot time object has all the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.slot_time_availability).to.be.an('array');",
									"    responseData.slot_time_availability.forEach(function(slot) {",
									"        pm.expect(slot.slot_time).to.be.an('object');",
									"        pm.expect(slot.slot_time.duration_sec).to.exist;",
									"        pm.expect(slot.slot_time.resource_ids).to.exist;",
									"        pm.expect(slot.slot_time.service_id).to.exist;",
									"        pm.expect(slot.slot_time.start_sec).to.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get current date",
									"let currentDate = new Date();",
									"",
									"// Calculate days until next Friday (assuming today is Sunday as 0 and Saturday as 6)",
									"let daysUntilFriday = 5 - currentDate.getDay();",
									"",
									"// If today is Friday, add 7 days to get next Friday",
									"if (daysUntilFriday <= 0) {",
									"    daysUntilFriday += 7;",
									"}",
									"",
									"// Add days until next Friday",
									"    currentDate.setDate(currentDate.getDate() + daysUntilFriday);",
									"",
									"// Initialize array to store Unix times for the next four Fridays",
									"let unixTimes = [];",
									"",
									"// Generate Unix times for the next four Fridays",
									"for (let i = 0; i < 4; i++) {",
									"    // Set time to 7pm",
									"    ",
									"",
									"    for (let h = 12; h < 20; h++) {",
									"",
									"        currentDate.setHours(h, 0, 0, 0);",
									"        // Calculate Unix time",
									"        let unixTime = Math.floor(currentDate.getTime() / 1000);",
									"",
									"        // Add to array",
									"        unixTimes.push(unixTime);",
									"",
									"    }",
									"",
									"    // Move to next Friday",
									"    currentDate.setDate(currentDate.getDate() + 7);",
									"}",
									"",
									"// Choose a random Unix time from the array for next Friday",
									"let randomIndex = Math.floor(Math.random() * unixTimes.length);",
									"let randomFridayUnixTime = unixTimes[randomIndex];",
									"",
									"// Set environment variable for next Friday",
									"pm.environment.set(\"nextFridayUnixTime\", randomFridayUnixTime);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "Google-4@tableo.com",
									"type": "string"
								},
								{
									"key": "username",
									"value": "Google-4@tableo.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchant_id\": \"{{merchant_id}}\",\n    \"slot_time\": [\n        {\n            \"duration_sec\": \"5400\",\n            \"resource_ids\": {\n              \n                \"room_id\": \"196\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1748646000\"\n        },\n        {\n            \"duration_sec\": \"5400\",\n            \"resource_ids\": {\n                \"party_size\": 2,\n                \"room_id\": \"298\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1749245400\"\n        },\n        {\n            \"duration_sec\": \"5400\",\n            \"resource_ids\": {\n                \"party_size\": 2,\n                \"room_id\": \"3906\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1749245400\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/google-server/v3/BatchAvailabilityLookup",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"google-server",
								"v3",
								"BatchAvailabilityLookup"
							]
						},
						"description": "# BatchAvailabilityLookup method\n\nWhen a BatchAvailabilityLookup is issued, the partner booking server verifies that the requested appointment slots are currently valid and available. This can be used by Reserve with Google to ensure that only current slots are presented to users during the reservation flow.\n\n**Request**\n\n```\n// ID of the merchant.\nstring merchant_id = 1;\n// Multiple slot times to be checked for availability. All queried times apply   \n// to the same merchant_id and service_id.\nArray slot_time = [];\n// ID of the service. (required)   \nstring service_id = \"reservation\";\n// Start time of the appointment slot in seconds of UTC time since Unix epoch\n// (required)   \nint64 start_sec = 1;\n// Duration of the appointment slot in seconds (optional)   \nint64 duration_sec = 2;\n// The set of resources that specifies the appointment slot, e.g. by   \n// indicating the staff member and room selected by the user, or party size   \n// for dining slots (optional)   \nObject resource_ids = {};\n// The room ID as provided in the feed or empty if not applicable or no room   \n// was selected. (required)\nstring room_id = \"1\";\n// For Dining Reservations only: the number of seats requested in the booking.   \n// (required)\nint32 party_size = 3;\n\n```\n\n**Return value**\n\n```\n// The availabilities for the requested SlotTime entries. There must be   \n// exactly one slot_time_availability for each SlotTime entry in the   \n// [ext.maps.booking.partner.v3.BatchAvailabilityLookupRequest].   \nArray slot_time_availability = [];\n// The SlotTime for which availability was checked.   \nArray slot_time = [];\n// Whether the requested SlotTime is available   \nbool available;\n\n```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchant_id\": \"ChIJEdrEempFDhMR4LNtV4D7OKo\",\n    \"slot_time\": [\n        {\n            \"duration_sec\": \"1800\",\n            \"resource_ids\": {\n                \"party_size\": 3,\n                \"room_id\": \"1\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1649757600\"\n        },\n        {\n            \"duration_sec\": \"1800\",\n            \"resource_ids\": {\n                \"party_size\": 3,\n                \"room_id\": \"1\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1649750410\"\n        },\n        {\n            \"duration_sec\": \"1800\",\n            \"resource_ids\": {\n                \"party_size\": 3,\n                \"room_id\": \"1\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1647367200\"\n        },\n        {\n            \"duration_sec\": \"1800\",\n            \"resource_ids\": {\n                \"party_size\": 3,\n                \"room_id\": \"1\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1647369000\"\n        },\n        {\n            \"duration_sec\": \"1800\",\n            \"resource_ids\": {\n                \"party_size\": 3,\n                \"room_id\": \"1\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1647370800\"\n        },\n        {\n            \"duration_sec\": \"1800\",\n            \"resource_ids\": {\n                \"party_size\": 3,\n                \"room_id\": \"1\"\n            },\n            \"service_id\": \"reservation\",\n            \"start_sec\": \"1647372600\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://devrms.tableo.com/BatchAvailabilityLookup",
									"protocol": "https",
									"host": [
										"devrms",
										"tableo",
										"com"
									],
									"path": [
										"BatchAvailabilityLookup"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.19.9"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.28"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 12 Apr 2022 08:41:08 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"slot_time_availability\": [\n        {\n            \"slot_time\": {\n                \"duration_sec\": \"1800\",\n                \"resource_ids\": {\n                    \"party_size\": 3,\n                    \"room_id\": \"1\"\n                },\n                \"service_id\": \"reservation\",\n                \"start_sec\": \"1649757600\"\n            },\n            \"available\": true\n        },\n        {\n            \"slot_time\": {\n                \"duration_sec\": \"1800\",\n                \"resource_ids\": {\n                    \"party_size\": 3,\n                    \"room_id\": \"1\"\n                },\n                \"service_id\": \"reservation\",\n                \"start_sec\": \"1649750410\"\n            },\n            \"available\": false\n        },\n        {\n            \"slot_time\": {\n                \"duration_sec\": \"1800\",\n                \"resource_ids\": {\n                    \"party_size\": 3,\n                    \"room_id\": \"1\"\n                },\n                \"service_id\": \"reservation\",\n                \"start_sec\": \"1647367200\"\n            },\n            \"available\": false\n        },\n        {\n            \"slot_time\": {\n                \"duration_sec\": \"1800\",\n                \"resource_ids\": {\n                    \"party_size\": 3,\n                    \"room_id\": \"1\"\n                },\n                \"service_id\": \"reservation\",\n                \"start_sec\": \"1647369000\"\n            },\n            \"available\": false\n        },\n        {\n            \"slot_time\": {\n                \"duration_sec\": \"1800\",\n                \"resource_ids\": {\n                    \"party_size\": 3,\n                    \"room_id\": \"1\"\n                },\n                \"service_id\": \"reservation\",\n                \"start_sec\": \"1647370800\"\n            },\n            \"available\": false\n        },\n        {\n            \"slot_time\": {\n                \"duration_sec\": \"1800\",\n                \"resource_ids\": {\n                    \"party_size\": 3,\n                    \"room_id\": \"1\"\n                },\n                \"service_id\": \"reservation\",\n                \"start_sec\": \"1647372600\"\n            },\n            \"available\": false\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "chatbot",
			"item": [
				{
					"name": "manager message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"    ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchant_id\":\"ChIJRe5DsfxRDhMRDhagFJI5py8\",\n    \"message\":\"hola\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/chatbot/manager-message",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"chatbot",
								"manager-message"
							]
						},
						"description": "# UpdateBooking method\n\nThe client uses UpdateBooking to modify an existing booking.\n\nIf updating a booking fails due to any business logic error, the error should be populated in the `UpdateBookingResponse.booking_failure` field and returned with HTTP status 200.\n\n**Request**\n\n``` markdown\n  // The booking to be updated\n  // The following fields can be set in a booking:\n  // - status, to cancel a booking.\n  // - one of the following is required:\n  //   - start_time AND duration in the slot, to reschedule a booking.\n  //   - party_size (for dining reservations).\n  Object booking = {};\n  // ID of this booking, which must be unique across all bookings. (required)\n  string booking_id = \"1\";\n  // The inventory slot that is being requested to make this booking.\n  // If lease_ref is provided, slot must match the lease; slot is provided for\n  // the partner to verify the lease information.\n  // If lease_ref is absent, then create the booking for the slot. (required)\n  Object slot = {};\n\n```\n\nA request message contains updated information in the booking field. The request will contain a `booking_id` to identify the booking to update. It will also include:\n\n1. Slot details to update (booking modifications)\n    \n\nFields which do not require change will not be provided in the request.\n\n**Return value**\n\n``` markdown\n  // The updated booking (required)\n  Object booking = {};\n  // If updating a booking fails, this field should reflect the business logic\n  // error (e.g., booking is not cancellable) (required if failure occurs)\n  Object booking_failure = {};\n  // duration in milliseconds from the server\n  Int64 process_duration_in_milliseconds = 362\n\n```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking\": {\n        \"booking_id\": \"{{booking_id}}\",\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/UpdateBooking",
									"host": [
										"{{url}}"
									],
									"path": [
										"UpdateBooking"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.19.9"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.32"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Dec 2022 18:31:49 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"booking\": {\n        \"booking_id\": \"Google-V2M-NYB\",\n        \"payment_information\": {\n            \"prepayment_status\": \"PREPAYMENT_NOT_PROVIDED\"\n        },\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        },\n        \"status\": \"CONFIRMED\"\n    },\n    \"process_duration_in_milliseconds\": 20899\n}"
						}
					]
				},
				{
					"name": "get booking by reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Date is in a valid date format and time zone\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.date).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{6}Z$/);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Validate the booking_failure field in UpdateBookingResponse if the update fails due to business logic error\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data.status).to.exist;",
									"    pm.expect(responseData.data.dining_area_id).to.exist;",
									"    pm.expect(responseData.data.restaurant_id).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchant_id\":\"ChIJRe5DsfxRDhMRDhagFJI5py8\",\n    \"message\":\"hola\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/chatbot/booking/{{booking_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"chatbot",
								"booking",
								"{{booking_id}}"
							]
						},
						"description": "# UpdateBooking method\n\nThe client uses UpdateBooking to modify an existing booking.\n\nIf updating a booking fails due to any business logic error, the error should be populated in the `UpdateBookingResponse.booking_failure` field and returned with HTTP status 200.\n\n**Request**\n\n``` markdown\n  // The booking to be updated\n  // The following fields can be set in a booking:\n  // - status, to cancel a booking.\n  // - one of the following is required:\n  //   - start_time AND duration in the slot, to reschedule a booking.\n  //   - party_size (for dining reservations).\n  Object booking = {};\n  // ID of this booking, which must be unique across all bookings. (required)\n  string booking_id = \"1\";\n  // The inventory slot that is being requested to make this booking.\n  // If lease_ref is provided, slot must match the lease; slot is provided for\n  // the partner to verify the lease information.\n  // If lease_ref is absent, then create the booking for the slot. (required)\n  Object slot = {};\n\n```\n\nA request message contains updated information in the booking field. The request will contain a `booking_id` to identify the booking to update. It will also include:\n\n1. Slot details to update (booking modifications)\n    \n\nFields which do not require change will not be provided in the request.\n\n**Return value**\n\n``` markdown\n  // The updated booking (required)\n  Object booking = {};\n  // If updating a booking fails, this field should reflect the business logic\n  // error (e.g., booking is not cancellable) (required if failure occurs)\n  Object booking_failure = {};\n  // duration in milliseconds from the server\n  Int64 process_duration_in_milliseconds = 362\n\n```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking\": {\n        \"booking_id\": \"{{booking_id}}\",\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/UpdateBooking",
									"host": [
										"{{url}}"
									],
									"path": [
										"UpdateBooking"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.19.9"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.32"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Dec 2022 18:31:49 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"booking\": {\n        \"booking_id\": \"Google-V2M-NYB\",\n        \"payment_information\": {\n            \"prepayment_status\": \"PREPAYMENT_NOT_PROVIDED\"\n        },\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        },\n        \"status\": \"CONFIRMED\"\n    },\n    \"process_duration_in_milliseconds\": 20899\n}"
						},
						{
							"name": "ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchant_id\":\"ChIJRe5DsfxRDhMRDhagFJI5py8\",\n    \"message\":\"hola\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/chatbot/booking/PFM-YJR",
									"host": [
										"{{url}}"
									],
									"path": [
										"chatbot",
										"booking",
										"PFM-YJR"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.25.1"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.2.10"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Wed, 21 Feb 2024 21:09:00 GMT"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"id\": 1023612,\n        \"reference\": \"PFM-YJR\",\n        \"no_of_adults\": 2,\n        \"no_of_children\": 0,\n        \"date\": \"2024-02-14T05:45:00.000000Z\",\n        \"end_time\": \"2024-02-14T08:15:00.000000Z\",\n        \"duration\": 150,\n        \"booking_flexible\": 0,\n        \"dining_area_id\": 1,\n        \"restaurant_id\": 582,\n        \"status\": \"awaiting_event_payment\",\n        \"waiting_list\": 0,\n        \"comment\": null,\n        \"patron_id\": 326511,\n        \"edited_by\": 2101,\n        \"created_by\": 2101,\n        \"created_at\": \"2024-01-25T09:07:22.000000Z\",\n        \"updated_at\": \"2024-01-25T09:07:39.000000Z\",\n        \"channel_id\": 1,\n        \"private_comment\": null,\n        \"is_from_api\": 0,\n        \"staff_id\": null,\n        \"booking_cancellation_reason_id\": null,\n        \"table_histories\": [\n            {\n                \"tables\": [\n                    {\n                        \"id\": 7516,\n                        \"name\": \"T 3\"\n                    }\n                ],\n                \"date\": \"2024-01-25T09:07:22.213085Z\"\n            }\n        ],\n        \"concierge_id\": null,\n        \"api_3rd_parties\": 0,\n        \"company\": null,\n        \"deleted_at\": null\n    }\n}"
						}
					]
				},
				{
					"name": "get bookings by patron's phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(booking) {",
									"        pm.expect(booking).to.include.all.keys('reference', 'no_of_adults', 'no_of_children', 'date', 'end_time', 'status', 'dining_area', 'restaurant', 'channel');",
									"    });",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response must have Content-Type header\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/chatbot/patron/35699939607/booking?merchant_id={{merchant_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"chatbot",
								"patron",
								"35699939607",
								"booking"
							],
							"query": [
								{
									"key": "merchant_id",
									"value": "{{merchant_id}}"
								}
							]
						},
						"description": "# UpdateBooking method\n\nThe client uses UpdateBooking to modify an existing booking.\n\nIf updating a booking fails due to any business logic error, the error should be populated in the `UpdateBookingResponse.booking_failure` field and returned with HTTP status 200.\n\n**Request**\n\n``` markdown\n  // The booking to be updated\n  // The following fields can be set in a booking:\n  // - status, to cancel a booking.\n  // - one of the following is required:\n  //   - start_time AND duration in the slot, to reschedule a booking.\n  //   - party_size (for dining reservations).\n  Object booking = {};\n  // ID of this booking, which must be unique across all bookings. (required)\n  string booking_id = \"1\";\n  // The inventory slot that is being requested to make this booking.\n  // If lease_ref is provided, slot must match the lease; slot is provided for\n  // the partner to verify the lease information.\n  // If lease_ref is absent, then create the booking for the slot. (required)\n  Object slot = {};\n\n```\n\nA request message contains updated information in the booking field. The request will contain a `booking_id` to identify the booking to update. It will also include:\n\n1. Slot details to update (booking modifications)\n    \n\nFields which do not require change will not be provided in the request.\n\n**Return value**\n\n``` markdown\n  // The updated booking (required)\n  Object booking = {};\n  // If updating a booking fails, this field should reflect the business logic\n  // error (e.g., booking is not cancellable) (required if failure occurs)\n  Object booking_failure = {};\n  // duration in milliseconds from the server\n  Int64 process_duration_in_milliseconds = 362\n\n```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchant_id\":\"ChIJRe5DsfxRDhMRDhagFJI5py8\",\n    \"message\":\"hola\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/chatbot/patron/35699939607/booking",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"chatbot",
										"patron",
										"35699939607",
										"booking"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.25.4"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.3.7"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Wed, 22 May 2024 20:02:03 GMT"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"reference\": \"DMJ-E1B\",\n            \"no_of_adults\": 2,\n            \"no_of_children\": 0,\n            \"date\": \"2022-12-24T17:00:00.000000Z\",\n            \"end_time\": \"2022-12-24T19:00:00.000000Z\",\n            \"status\": \"accepted\",\n            \"dining_area\": \"Indoor\",\n            \"restaurant\": \"TBL Ben's Bistro\",\n            \"channel\": \"Widget\"\n        },\n        {\n            \"reference\": \"3FG-69J\",\n            \"no_of_adults\": 2,\n            \"no_of_children\": 0,\n            \"date\": \"2022-12-24T18:00:00.000000Z\",\n            \"end_time\": \"2022-12-24T20:00:00.000000Z\",\n            \"status\": \"accepted\",\n            \"dining_area\": \"Indoor\",\n            \"restaurant\": \"TBL Ben's Bistro\",\n            \"channel\": \"Widget\"\n        },\n        {\n            \"reference\": \"KPG-045\",\n            \"no_of_adults\": 3,\n            \"no_of_children\": 0,\n            \"date\": \"2022-12-07T20:00:00.000000Z\",\n            \"end_time\": \"2022-12-07T22:00:00.000000Z\",\n            \"status\": \"cancelled\",\n            \"dining_area\": \"Indoor\",\n            \"restaurant\": \"TBL Ben's Bistro\",\n            \"channel\": \"Widget\"\n        },\n        {\n            \"reference\": \"Google-ZXO-JE3\",\n            \"no_of_adults\": 2,\n            \"no_of_children\": null,\n            \"date\": \"2023-06-17T09:00:00.000000Z\",\n            \"end_time\": \"2023-06-17T11:00:00.000000Z\",\n            \"status\": \"accepted\",\n            \"dining_area\": \"Indoor\",\n            \"restaurant\": \"TBL Ben's Bistro\",\n            \"channel\": \"Google\"\n        },\n        {\n            \"reference\": \"Google-8MV-5BI\",\n            \"no_of_adults\": 2,\n            \"no_of_children\": null,\n            \"date\": \"2024-02-12T19:00:00.000000Z\",\n            \"end_time\": \"2024-02-12T21:00:00.000000Z\",\n            \"status\": \"accepted\",\n            \"dining_area\": \"Indoor\",\n            \"restaurant\": \"TBL Ben's Bistro\",\n            \"channel\": \"Google\"\n        },\n        {\n            \"reference\": \"aichatbot-VXT-0EM\",\n            \"no_of_adults\": 3,\n            \"no_of_children\": null,\n            \"date\": \"2024-02-12T19:00:00.000000Z\",\n            \"end_time\": \"2024-02-12T21:00:00.000000Z\",\n            \"status\": \"cancelled\",\n            \"dining_area\": \"Outdoor\",\n            \"restaurant\": \"TBL Ben's Bistro\",\n            \"channel\": \"aichatbot\"\n        },\n        {\n            \"reference\": \"aichatbot-Q4M-A0H\",\n            \"no_of_adults\": 2,\n            \"no_of_children\": null,\n            \"date\": \"2024-05-06T19:00:00.000000Z\",\n            \"end_time\": \"2024-05-06T21:00:00.000000Z\",\n            \"status\": \"accepted\",\n            \"dining_area\": \"Indoor\",\n            \"restaurant\": \"TBL Ben's Bistro\",\n            \"channel\": \"aichatbot\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "update booking by reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is within acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Data object should exist in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('data');",
									"    pm.expect(responseData.data).to.be.an('object');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchant_id\":\"ChIJRe5DsfxRDhMRDhagFJI5py8\",\n    \"message\":\"hola\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/chatbot/booking/{{booking_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"chatbot",
								"booking",
								"{{booking_id}}"
							]
						},
						"description": "# UpdateBooking method\n\nThe client uses UpdateBooking to modify an existing booking.\n\nIf updating a booking fails due to any business logic error, the error should be populated in the `UpdateBookingResponse.booking_failure` field and returned with HTTP status 200.\n\n**Request**\n\n``` markdown\n  // The booking to be updated\n  // The following fields can be set in a booking:\n  // - status, to cancel a booking.\n  // - one of the following is required:\n  //   - start_time AND duration in the slot, to reschedule a booking.\n  //   - party_size (for dining reservations).\n  Object booking = {};\n  // ID of this booking, which must be unique across all bookings. (required)\n  string booking_id = \"1\";\n  // The inventory slot that is being requested to make this booking.\n  // If lease_ref is provided, slot must match the lease; slot is provided for\n  // the partner to verify the lease information.\n  // If lease_ref is absent, then create the booking for the slot. (required)\n  Object slot = {};\n\n```\n\nA request message contains updated information in the booking field. The request will contain a `booking_id` to identify the booking to update. It will also include:\n\n1. Slot details to update (booking modifications)\n    \n\nFields which do not require change will not be provided in the request.\n\n**Return value**\n\n``` markdown\n  // The updated booking (required)\n  Object booking = {};\n  // If updating a booking fails, this field should reflect the business logic\n  // error (e.g., booking is not cancellable) (required if failure occurs)\n  Object booking_failure = {};\n  // duration in milliseconds from the server\n  Int64 process_duration_in_milliseconds = 362\n\n```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking\": {\n        \"booking_id\": \"{{booking_id}}\",\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/UpdateBooking",
									"host": [
										"{{url}}"
									],
									"path": [
										"UpdateBooking"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.19.9"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.32"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Dec 2022 18:31:49 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"booking\": {\n        \"booking_id\": \"Google-V2M-NYB\",\n        \"payment_information\": {\n            \"prepayment_status\": \"PREPAYMENT_NOT_PROVIDED\"\n        },\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        },\n        \"status\": \"CONFIRMED\"\n    },\n    \"process_duration_in_milliseconds\": 20899\n}"
						},
						{
							"name": "ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchant_id\":\"ChIJRe5DsfxRDhMRDhagFJI5py8\",\n    \"message\":\"hola\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/chatbot/booking/PFM-YJR",
									"host": [
										"{{url}}"
									],
									"path": [
										"chatbot",
										"booking",
										"PFM-YJR"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.25.1"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.2.10"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Wed, 21 Feb 2024 21:09:00 GMT"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"id\": 1023612,\n        \"reference\": \"PFM-YJR\",\n        \"no_of_adults\": 2,\n        \"no_of_children\": 0,\n        \"date\": \"2024-02-14T05:45:00.000000Z\",\n        \"end_time\": \"2024-02-14T08:15:00.000000Z\",\n        \"duration\": 150,\n        \"booking_flexible\": 0,\n        \"dining_area_id\": 1,\n        \"restaurant_id\": 582,\n        \"status\": \"awaiting_event_payment\",\n        \"waiting_list\": 0,\n        \"comment\": null,\n        \"patron_id\": 326511,\n        \"edited_by\": 2101,\n        \"created_by\": 2101,\n        \"created_at\": \"2024-01-25T09:07:22.000000Z\",\n        \"updated_at\": \"2024-01-25T09:07:39.000000Z\",\n        \"channel_id\": 1,\n        \"private_comment\": null,\n        \"is_from_api\": 0,\n        \"staff_id\": null,\n        \"booking_cancellation_reason_id\": null,\n        \"table_histories\": [\n            {\n                \"tables\": [\n                    {\n                        \"id\": 7516,\n                        \"name\": \"T 3\"\n                    }\n                ],\n                \"date\": \"2024-01-25T09:07:22.213085Z\"\n            }\n        ],\n        \"concierge_id\": null,\n        \"api_3rd_parties\": 0,\n        \"company\": null,\n        \"deleted_at\": null\n    }\n}"
						}
					]
				},
				{
					"name": "get restaurant status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Data object is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('data');",
									"});",
									"",
									"",
									"pm.test(\"Active field in the response data should exist and be a boolean\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.active).to.exist;",
									"    pm.expect(responseData.data.active).to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Response time is within the acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"merchant_id\":\"ChIJRe5DsfxRDhMRDhagFJI5py8\",\n    \"message\":\"hola\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/chatbot/restaurant/{{restaurant_slug}}/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"chatbot",
								"restaurant",
								"{{restaurant_slug}}",
								"status"
							]
						},
						"description": "# UpdateBooking method\n\nThe client uses UpdateBooking to modify an existing booking.\n\nIf updating a booking fails due to any business logic error, the error should be populated in the `UpdateBookingResponse.booking_failure` field and returned with HTTP status 200.\n\n**Request**\n\n``` markdown\n  // The booking to be updated\n  // The following fields can be set in a booking:\n  // - status, to cancel a booking.\n  // - one of the following is required:\n  //   - start_time AND duration in the slot, to reschedule a booking.\n  //   - party_size (for dining reservations).\n  Object booking = {};\n  // ID of this booking, which must be unique across all bookings. (required)\n  string booking_id = \"1\";\n  // The inventory slot that is being requested to make this booking.\n  // If lease_ref is provided, slot must match the lease; slot is provided for\n  // the partner to verify the lease information.\n  // If lease_ref is absent, then create the booking for the slot. (required)\n  Object slot = {};\n\n```\n\nA request message contains updated information in the booking field. The request will contain a `booking_id` to identify the booking to update. It will also include:\n\n1. Slot details to update (booking modifications)\n    \n\nFields which do not require change will not be provided in the request.\n\n**Return value**\n\n``` markdown\n  // The updated booking (required)\n  Object booking = {};\n  // If updating a booking fails, this field should reflect the business logic\n  // error (e.g., booking is not cancellable) (required if failure occurs)\n  Object booking_failure = {};\n  // duration in milliseconds from the server\n  Int64 process_duration_in_milliseconds = 362\n\n```"
					},
					"response": [
						{
							"name": "200 ok",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"booking\": {\n        \"booking_id\": \"{{booking_id}}\",\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/UpdateBooking",
									"host": [
										"{{url}}"
									],
									"path": [
										"UpdateBooking"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.19.9"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/7.4.32"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Tue, 20 Dec 2022 18:31:49 GMT"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"booking\": {\n        \"booking_id\": \"Google-V2M-NYB\",\n        \"payment_information\": {\n            \"prepayment_status\": \"PREPAYMENT_NOT_PROVIDED\"\n        },\n        \"slot\": {\n            \"duration_sec\": \"7200\",\n            \"resources\": {\n                \"party_size\": 3\n            },\n            \"start_sec\": \"1671645600\"\n        },\n        \"status\": \"CONFIRMED\"\n    },\n    \"process_duration_in_milliseconds\": 20899\n}"
						},
						{
							"name": "ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"merchant_id\":\"ChIJRe5DsfxRDhMRDhagFJI5py8\",\n    \"message\":\"hola\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/chatbot/booking/PFM-YJR",
									"host": [
										"{{url}}"
									],
									"path": [
										"chatbot",
										"booking",
										"PFM-YJR"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.25.1"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "X-Powered-By",
									"value": "PHP/8.2.10"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, private"
								},
								{
									"key": "Date",
									"value": "Wed, 21 Feb 2024 21:09:00 GMT"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"id\": 1023612,\n        \"reference\": \"PFM-YJR\",\n        \"no_of_adults\": 2,\n        \"no_of_children\": 0,\n        \"date\": \"2024-02-14T05:45:00.000000Z\",\n        \"end_time\": \"2024-02-14T08:15:00.000000Z\",\n        \"duration\": 150,\n        \"booking_flexible\": 0,\n        \"dining_area_id\": 1,\n        \"restaurant_id\": 582,\n        \"status\": \"awaiting_event_payment\",\n        \"waiting_list\": 0,\n        \"comment\": null,\n        \"patron_id\": 326511,\n        \"edited_by\": 2101,\n        \"created_by\": 2101,\n        \"created_at\": \"2024-01-25T09:07:22.000000Z\",\n        \"updated_at\": \"2024-01-25T09:07:39.000000Z\",\n        \"channel_id\": 1,\n        \"private_comment\": null,\n        \"is_from_api\": 0,\n        \"staff_id\": null,\n        \"booking_cancellation_reason_id\": null,\n        \"table_histories\": [\n            {\n                \"tables\": [\n                    {\n                        \"id\": 7516,\n                        \"name\": \"T 3\"\n                    }\n                ],\n                \"date\": \"2024-01-25T09:07:22.213085Z\"\n            }\n        ],\n        \"concierge_id\": null,\n        \"api_3rd_parties\": 0,\n        \"company\": null,\n        \"deleted_at\": null\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "stripe",
			"item": [
				{
					"name": "webhook",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"evt_1P3FYQI9BCKEKwHW0Dwgkzh3\",\n    \"object\": \"event\",\n    \"api_version\": \"2020-08-27\",\n    \"created\": 1712572557,\n    \"data\": {\n        \"object\": {\n            \"id\": \"in_1P3FYNI9BCKEKwHWvSr0s7oS\",\n            \"object\": \"invoice\",\n            \"account_country\": \"MT\",\n            \"account_name\": \"Bookia / Tableo\",\n            \"account_tax_ids\": null,\n            \"amount_due\": 26373,\n            \"amount_paid\": 0,\n            \"amount_remaining\": 26373,\n            \"amount_shipping\": 0,\n            \"application\": null,\n            \"application_fee_amount\": null,\n            \"attempt_count\": 1,\n            \"attempted\": true,\n            \"auto_advance\": false,\n            \"automatic_tax\": {\n                \"enabled\": false,\n                \"liability\": null,\n                \"status\": null\n            },\n            \"billing_reason\": \"manual\",\n            \"charge\": \"ch_3P3FYOI9BCKEKwHW07boqNYF\",\n            \"collection_method\": \"charge_automatically\",\n            \"created\": 1712572555,\n            \"currency\": \"eur\",\n            \"custom_fields\": null,\n            \"customer\": \"cus_Nz1aiOQyc1NfAT\",\n            \"customer_address\": null,\n            \"customer_email\": \"info@salumeriamalta.com\",\n            \"customer_name\": \"Salumeria Gardens\",\n            \"customer_phone\": null,\n            \"customer_shipping\": null,\n            \"customer_tax_exempt\": \"none\",\n            \"customer_tax_ids\": [],\n            \"default_payment_method\": \"src_1NQXdPI9BCKEKwHW0SKozYE2\",\n            \"default_source\": null,\n            \"default_tax_rates\": [],\n            \"description\": null,\n            \"discount\": null,\n            \"discounts\": [],\n            \"due_date\": null,\n            \"effective_at\": 1712572555,\n            \"ending_balance\": 0,\n            \"footer\": null,\n            \"from_invoice\": null,\n            \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1K99iEI9BCKEKwHW/live_YWNjdF8xSzk5aUVJOUJDS0VLd0hXLF9QdDFiWVRsUUxQajAyQk1Pc3VwZTJyRjc2OVk4bm1nLDEwMzExMzM1OA0200AxnVUSrI?s=ap\",\n            \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1K99iEI9BCKEKwHW/live_YWNjdF8xSzk5aUVJOUJDS0VLd0hXLF9QdDFiWVRsUUxQajAyQk1Pc3VwZTJyRjc2OVk4bm1nLDEwMzExMzM1OA0200AxnVUSrI/pdf?s=ap\",\n            \"issuer\": {\n                \"type\": \"self\"\n            },\n            \"last_finalization_error\": null,\n            \"latest_revision\": null,\n            \"lines\": {\n                \"object\": \"list\",\n                \"data\": [\n                    {\n                        \"id\": \"il_1P3FYMI9BCKEKwHWNLsfBWnb\",\n                        \"object\": \"line_item\",\n                        \"amount\": 26373,\n                        \"amount_excluding_tax\": 26373,\n                        \"currency\": \"eur\",\n                        \"description\": \"outstanding bills: Salumeria Gardens\",\n                        \"discount_amounts\": [],\n                        \"discountable\": true,\n                        \"discounts\": [],\n                        \"invoice\": \"in_1P3FYNI9BCKEKwHWvSr0s7oS\",\n                        \"invoice_item\": \"ii_1P3FYMI9BCKEKwHW4NkJxfRH\",\n                        \"livemode\": true,\n                        \"metadata\": {},\n                        \"period\": {\n                            \"end\": 1712572554,\n                            \"start\": 1712572554\n                        },\n                        \"plan\": null,\n                        \"price\": {\n                            \"id\": \"price_1P3FYMI9BCKEKwHWVtD6JTmc\",\n                            \"object\": \"price\",\n                            \"active\": false,\n                            \"billing_scheme\": \"per_unit\",\n                            \"created\": 1712572554,\n                            \"currency\": \"eur\",\n                            \"custom_unit_amount\": null,\n                            \"livemode\": true,\n                            \"lookup_key\": null,\n                            \"metadata\": {},\n                            \"nickname\": null,\n                            \"product\": \"prod_Pt1bB0wWAa5ju2\",\n                            \"recurring\": null,\n                            \"tax_behavior\": \"unspecified\",\n                            \"tiers_mode\": null,\n                            \"transform_quantity\": null,\n                            \"type\": \"one_time\",\n                            \"unit_amount\": 26373,\n                            \"unit_amount_decimal\": \"26373\"\n                        },\n                        \"proration\": false,\n                        \"proration_details\": {\n                            \"credited_items\": null\n                        },\n                        \"quantity\": 1,\n                        \"subscription\": null,\n                        \"tax_amounts\": [],\n                        \"tax_rates\": [],\n                        \"type\": \"invoiceitem\",\n                        \"unit_amount_excluding_tax\": \"26373\"\n                    }\n                ],\n                \"has_more\": false,\n                \"total_count\": 1,\n                \"url\": \"/v1/invoices/in_1P3FYNI9BCKEKwHWvSr0s7oS/lines\"\n            },\n            \"livemode\": true,\n            \"metadata\": {\n                \"user\": \"kiju-kijuc@hotmail.com\"\n            },\n            \"next_payment_attempt\": null,\n            \"number\": \"4CC14B5C-2065\",\n            \"on_behalf_of\": null,\n            \"paid\": false,\n            \"paid_out_of_band\": false,\n            \"payment_intent\": \"pi_3P3FYOI9BCKEKwHW0vt7wMPY\",\n            \"payment_settings\": {\n                \"default_mandate\": null,\n                \"payment_method_options\": null,\n                \"payment_method_types\": null\n            },\n            \"period_end\": 1712572555,\n            \"period_start\": 1712572555,\n            \"post_payment_credit_notes_amount\": 0,\n            \"pre_payment_credit_notes_amount\": 0,\n            \"quote\": null,\n            \"receipt_number\": null,\n            \"rendering\": {\n                \"amount_tax_display\": \"exclude_tax\",\n                \"pdf\": {\n                    \"page_size\": \"letter\"\n                }\n            },\n            \"rendering_options\": {\n                \"amount_tax_display\": \"exclude_tax\"\n            },\n            \"shipping_cost\": null,\n            \"shipping_details\": null,\n            \"starting_balance\": 0,\n            \"statement_descriptor\": null,\n            \"status\": \"open\",\n            \"status_transitions\": {\n                \"finalized_at\": 1712572555,\n                \"marked_uncollectible_at\": null,\n                \"paid_at\": null,\n                \"voided_at\": null\n            },\n            \"subscription\": null,\n            \"subscription_details\": {\n                \"metadata\": null\n            },\n            \"subtotal\": 26373,\n            \"subtotal_excluding_tax\": 26373,\n            \"tax\": null,\n            \"test_clock\": null,\n            \"total\": 26373,\n            \"total_discount_amounts\": [],\n            \"total_excluding_tax\": 26373,\n            \"total_tax_amounts\": [],\n            \"transfer_data\": null,\n            \"webhooks_delivered_at\": 1712572555\n        }\n    },\n    \"livemode\": true,\n    \"pending_webhooks\": 1,\n    \"request\": {\n        \"id\": \"req_xVbXpgDE3xAsXJ\",\n        \"idempotency_key\": \"92b60adc-cd49-4003-9f57-4029a4a58c7e\"\n    },\n    \"type\": \"invoice.payment_failed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/stripe/webhook",
							"host": [
								"{{url}}"
							],
							"path": [
								"stripe",
								"webhook"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "freshworks",
			"item": [
				{
					"name": "Webhook",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "1|1BChfZvzDA36VKwKJdbPLiIEGC8Jmp4rU0V4GPIza14639ea",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sales_account_id\": 202001517773,\n    \"sales_account_owner_email\": \"mauricio@bookia.eu\",\n    \"sales_account_owner_name\": \"freshsales\",\n    \"sales_account_owner_id\": 123456,\n    \"sales_account_parent_sales_account_id\": 123456,\n    \"sales_account_cf_tableo_uid\": \"freshsales\",\n    \"sales_account_cf_tableo_account\": \"freshsales\",\n    \"sales_account_cf_connected_to_tableo\": \"freshsales\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/freshworks/webhook",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"freshworks",
								"webhook"
							]
						}
					},
					"response": []
				},
				{
					"name": "Webhook Slack",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "1|1BChfZvzDA36VKwKJdbPLiIEGC8Jmp4rU0V4GPIza14639ea",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone_call_id\": 202000945524,\n  \"phone_call_owner_name\": \"Dev Team\",\n  \"phone_call_call_status\": \"Completed\",\n  \"phone_call_created_at\": \"01-07-2025 18:47:50\",\n  \"phone_call_outcome_id\": 202001529630,\n  \"phone_call_entity_first_name\": \"Agriturismo\",\n  \"phone_call_entity_last_name\": \"Puntalizzu\",\n  \"phone_call_entity_owner_name\": \"Monica Dang Minh\",\n  \"phone_call_entity_sales_account_cf_tableo_uid\": \"5825\",\n  \"phone_call_entity_country\": \"Italy\",\n  \"phone_call_entity_cf_country_code\": \"IT\",\n  \"phone_call_entity_recent_note\": \"mauricio test\",\n  \"phone_call_entity_sales_account_recent_note\": null,\n  \"phone_call_entity_id\": 202032002917,\n  \"phone_call_entity_sales_account_id\": 202004368087,\n  \"phone_call_entity_sales_account_name\": \"Puntalizzu\",\n  \"phone_call_call_direction\": \"Outgoing\",\n  \"phone_call_is_manual\": \"Yes\",\n  \"phone_call_entity_sales_account_cf_google_restaurant_name\": \"Agriturismo Puntalizzu, Appartamenti - Wines Food Homemade products, Hiking, MTB excursions, Outdoor activities\",\n  \"type\": \"Contact\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/freshworks/webhook/slack",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"freshworks",
								"webhook",
								"slack"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agora",
			"item": [
				{
					"name": "Turnos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/turnos",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"turnos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/reservas",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"reservas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reservas en mesa",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/reservas_en_mesa",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"reservas_en_mesa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Modificar mesas reserva",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reserva_id\":2043472,\"a_ids_mesas\":[235]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/reservas/modificar_mesas_reserva",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"reservas",
								"modificar_mesas_reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sentar reserva",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reserva_id\":2043472}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/reservas/sentar_reserva",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"reservas",
								"sentar_reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Liberar reserva",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ticket_json\": {\n        \"id_reserv\": \"2043493\",\n        \"items\": [\n            {\n                \"productName\": \"Pizza Barbacoa\",\n                \"amount\": \"1,00\",\n                \"unitPrice\": \"5,75\",\n                \"totalPrice\": \"5,75\"\n            }\n        ],\n        \"pyaments\": [\n            {\n                \"type\": \"Efectivo\",\n                \"amount\": \"6,33\"\n            }\n        ],\n        \"printDate\": \"2025-03-14 20:21:28\",\n        \"total\": \"6,33\"\n    },\n    \"reserva_id\": 2043493,\n    \"importe_total\": 6.33,\n    \"num_personas\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/reservas/liberar_reserva",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"reservas",
								"liberar_reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Crear reserva de paso",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"De Paso\",\n    \"num_pax\": 7,\n    \"a_ids_mesas\": [\n        235\n    ],\n    \"b_comprobar_mesas\": true,\n    \"b_comprobar_mesas_ocupadas\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/reservas/crear_reserva_de_paso",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"reservas",
								"crear_reserva_de_paso"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mesas",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/mesas",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"mesas"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{agoratoken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "widget",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/widget/ben-prelaunch-rest/",
					"host": [
						"{{url}}"
					],
					"path": [
						"widget",
						"ben-prelaunch-rest",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "trace test",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/test",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"test"
					]
				}
			},
			"response": []
		},
		{
			"name": "widget from google",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/widget/ben-prelaunch-rest/google-payment-redirect?date={{nextFridayUnixTime}}&no_of_adults=2&dining=Indoor",
					"host": [
						"{{url}}"
					],
					"path": [
						"widget",
						"ben-prelaunch-rest",
						"google-payment-redirect"
					],
					"query": [
						{
							"key": "date",
							"value": "{{nextFridayUnixTime}}"
						},
						{
							"key": "no_of_adults",
							"value": "2"
						},
						{
							"key": "dining",
							"value": "Indoor"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "widget service times",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/widget/ben-prelaunch-rest/service-times?day=2024-07-01&booking_date=2024-07-01&no_of_adults=2&no_of_children=0",
					"host": [
						"{{url}}"
					],
					"path": [
						"widget",
						"ben-prelaunch-rest",
						"service-times"
					],
					"query": [
						{
							"key": "day",
							"value": "2024-07-01"
						},
						{
							"key": "booking_date",
							"value": "2024-07-01"
						},
						{
							"key": "no_of_adults",
							"value": "2"
						},
						{
							"key": "no_of_children",
							"value": "0"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "Google-4@tableo.com",
				"type": "string"
			},
			{
				"key": "username",
				"value": "Google-4@tableo.com",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "merchant_id",
			"value": "ChIJrXobRBRRDhMRVDIWhzzmi38",
			"type": "string"
		},
		{
			"key": "url",
			"value": "https://devrms.tableo.com",
			"type": "string"
		}
	]
}